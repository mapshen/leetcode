Problem 1
LEETCODE 23: Merge K Sorted Arrays

from Queue import PriorityQueue

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        head = point = ListNode(0)
        q = PriorityQueue()
        for l in lists:
            if l:
                q.put((l.val, l))
        while not q.empty():
            val, node = q.get()
            point.next = ListNode(val)
            point = point.next
            node = node.next
            if node:
                q.put((node.val, node))
        return head.next


Problem 2
LEETCODE 43: Multiply Strings
class Solution(object):
    def multiply(self, num1, num2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        n1,k1 = 0,0
        for i in range(len(num1)-1,-1,-1):
            n1 += (ord(num1[i])-ord('0'))*10**k1
            k1 += 1

        n2,k2 = 0,0
        for j in range(len(num2)-1,-1,-1):
            n2 += (ord(num2[j])-ord('0'))*10**k2
            k2 += 1 

        return str(n1*n2)


Problem 3
LEETCODE 4: Median of Two Sorted Arrays
C++ Version

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int size1; int size2;
        int total;
        
        size1=nums1.size();
        size2=nums2.size();
        total=size1+size2;
        
        if(total%2==1){
            return fms(nums1,0,nums2,0,total/2+1);
        }else{
            return (fms(nums1,0,nums2,0,total/2)+fms(nums1,0,nums2,0,total/2+1))/2;
        }
        
    }
    
    double fms(vector<int> &nums1, int i, vector<int> &nums2, int j, int k) {
        if (nums1.size() - i > nums2.size() - j) return fms(nums2, j, nums1, i, k);
        if (nums1.size() == i) return nums2[j + k - 1];
        if (k == 1) return min(nums1[i], nums2[j]);
        int pa = min(i + k / 2, int(nums1.size())), pb = j + k - pa + i;
        if (nums1[pa - 1] < nums2[pb - 1]) 
            return fms(nums1, pa, nums2, j, k - pa + i);
        else if (nums1[pa - 1] > nums2[pb - 1]) 
            return fms(nums1, i, nums2, pb, k - pb + j);
        else 
            return nums1[pa - 1];
    }
};


Problem 4
LEETCODE 215: Kth Largest Element in an Array

class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """        
        return self.findKthSmallest(nums, 0, len(nums) - 1, len(nums) - k)
    
    def findKthSmallest(self, nums, l, r, k):
        pos = self.partition(nums, l, r)
        if pos == k:
            return nums[pos]
        elif pos < k:
            return self.findKthSmallest(nums, pos + 1, r, k)
        else:
            return self.findKthSmallest(nums, l, pos - 1, k)
    
    def partition(self, nums, l, r):
        current = l
        while l < r:
            if nums[l] < nums[r]:
                nums[current], nums[l] = nums[l], nums[current]
                current += 1
            l += 1
        nums[current], nums[r] = nums[r], nums[current]
        return current

Problem 5
LEETCODE 240: Search a 2D Matrix II

class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if not matrix or not matrix[0]:
            return False
    
        col = len(matrix[0]) - 1
    
        for row in matrix:
            while col >= 0:
                if row[col] > target:
                    col -= 1
                    continue
                if row[col] == target:
                    return True
                break
            
        return False
        
        
Problem 6
LEETCODE 932: Beautiful Array

class Solution(object):
    def beautifulArray(self, N):
        """
        :type N: int
        :rtype: List[int]
        """
        result = [1]
        while len(result) < N:
            result = [i*2 for i in result] + [i*2-1 for i in result]
        return [i for i in result if i<=N]
