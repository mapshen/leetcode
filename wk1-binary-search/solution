p1:
leetcode 81
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """
        if not nums:
            return False
        low = 0
        high = len(nums)-1
        while low < high:
            mid = low + (high-low) // 2
            if nums[mid] == target or nums[low] == target or nums[high] == target:
                return True

            if nums[mid] > target:
                if target >= nums[low]:
                    high = mid-1
                else:
                    if nums[mid] > nums[low]:
                        low = mid+1
                    elif nums[mid] < nums[low]:
                        high = mid-1
                    else:
                        high -= 1     #deal with duplicates
            else:
                if target <= nums[low]:
                    low = mid+1
                else:
                    if nums[mid] > nums[low]:
                        low = mid+1
                    elif nums[mid] < nums[low]:
                        high = mid-1
                    else:
                        high -= 1     #deal with duplicates
        if nums[low] == target:
            return True
        return False
        
p2:
leetcode 278
class Solution(object):
    def firstBadVersion(self, n):
        """
        :type n: int
        :rtype: int
        """
        low = 1
        high = n
        while low < high:
            mid = low + (high-low)/2
            if isBadVersion(mid):
                high=mid
            else:
                low = mid+1
        
        return low

p3:
leetcode 744
class Solution(object):
    def nextGreatestLetter(self, letters, target):
        """
        :type letters: List[str]
        :type target: str
        :rtype: str
        """
        low = 0
        high = len(letters)-1
        while low < high:
            mid = low + (high-low)/2
            if letters[mid]>target:
                high = mid
            else:
                low = mid + 1
        return letters[low] if letters[low]>target else letters[0]
        
p4:
leetcode 153
class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return None
        low = 0
        high = len(nums)-1
        if low == high:
            return nums[low]
        while low<high:
            mid = low + (high - low)/2
            if nums[low]>nums[high]:
            
                if nums[mid]<nums[low]:
                    high = mid
                elif nums[mid]>nums[low]:
                    low = mid
                else:
                    if nums[low]<=nums[high]:
                        return nums[low]
                    else:
                        return nums[high]
            else:
                return nums[low]


p5
leetcode 378
class Solution(object):
    def kthSmallest(self, matrix, k):
        """
        :type matrix: List[List[int]]
        :type k: int
        :rtype: int
        """
        low = matrix[0][0]
        high = matrix[-1][-1]
        n = len(matrix)

        while low < high:
            mid = low + (high-low)/2
            count = self.checkcount(matrix,mid,n)
            if count<k:
                low = mid + 1     
            else:
                
                high = mid  
        return low
    
    def checkcount(self,matrix,mid,n):
        count = 0 
        i = n-1
        j = 0
        while i>=0 and j<n:
            if matrix[i][j] <= mid:
                j+=1
                count+=i+1
            else:
                i-=1
        return count
p6
leetcode 410
class Solution(object):
    def splitArray(self, nums, m):
        """
        :type nums: List[int]
        :type m: int
        :rtype: int
        """
        low = max(nums)
        high = max(sum(nums),low)
        while low < high:
            mid = low + (high - low)//2
            if self.checkvalid(nums,mid,m):
                high = mid
            else:
                low = mid + 1
        
        return low 
        
    def checkvalid(self, nums, mid, m):
        cursum = 0 
        counter = 0
        for i in nums:
            cursum += i
            if cursum > mid:
                counter +=1
                cursum = i
            if counter>=m:
                return False   
        return True
