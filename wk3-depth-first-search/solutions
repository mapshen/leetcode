
Problem 1
101 Symmetric Tree https://leetcode.com/problems/symmetric-tree/

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True
        else:
            return self.isMirror(root.left,root.right)
    
    def isMirror(self, left, right):
        if( not left and not right ):
            return True
        if (not left or not right):
            return False
        if left.val == right.val:
            outer = self.isMirror(left.left, right.right) 
            inner = self.isMirror(left.right, right.left) 
            return outer and inner
        else:
            return False


Problem 2
105 Construct Binary Tree from Preorder and Inorder Traversal https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        if inorder:
            value = preorder.pop(0)
            idx = inorder.index(value)
            root = TreeNode(value)
            root.left = self.buildTree(preorder,inorder[:idx])
            root.right = self.buildTree(preorder,inorder[idx+1:])
            
            return root


Problem 3
113 Path Sum II https://leetcode.com/problems/path-sum-ii/

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, summ):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        if not root:
            return []
        if root.left == None and root.right == None:
            if root.val == summ:
                return [[root.val]]
            else:
                return []
        a = self.pathSum(root.left, summ - root.val) + self.pathSum(root.right, summ- root.val)
        return [ [root.val] + each for each in a]
        

Problem 4
207 Course Schedule https://leetcode.com/problems/course-schedule/

class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        graph = [[] for i in range(numCourses)]
        visit = [ 0 for i in range(numCourses)]
        
        for x, y in prerequisites:
            graph[x].append(y)
        for i in range(numCourses):
            if not self.dfs(i, visit, graph):
                return False
        return True
            
    def dfs(self, i, visit, graph):
        if visit[i] == -1:
            return False
        if visit[i] == 1:
            return True
        visit[i] = -1
        for j in graph[i]:
            if not self.dfs(j, visit, graph):
                return False
        visit[i] = 1
        return True


Problem 5
988 Smallest String Starting From Leaf https://leetcode.com/problems/smallest-string-starting-from-leaf/
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def smallestFromLeaf(self, root):
        """
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return ""
        else:
            paths = []
            def dfs(root,path):
                if not root:
                    return
                path = chr(root.val+97) + path
                if root.left == root.right == None:
                    paths.append(path)
                else:
                    dfs(root.left,path)
                    dfs(root.right,path)
   
            dfs(root,'')
            return min(paths)


Problem 6
980 Unique Paths III https://leetcode.com/problems/unique-paths-iii/

class Solution(object):
    def uniquePathsIII(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        rows = len(grid)
        cols = len(grid[0])
        
        visited = [[False for i in range(cols)] for j in range (rows)]
        numZeros = 0 
        startRow = -1
        startCol = -1
        
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == -1:
                    visited[i][j] = True
                elif grid[i][j] == 0:
                    numZeros += 1
                elif grid[i][j] == 1:
                    startRow = i
                    startCol = j
                    
        return self.dfs(rows, cols, startRow, startCol, grid, visited, numZeros, 0, 0)
        
    def dfs(self, rows, cols, row, col, grid, visited, numZeros, visitedZeros, score):
        visited[row][col] = True
        
        if grid[row][col] == 0:
            visitedZeros += 1
        elif grid[row][col] == 2:
            if visitedZeros == numZeros:
                score += 1
            visited[row][col] = False
            return score
        
        #left top right down
        if row > 0 and not visited[row-1][col]:
            score = self.dfs(rows, cols, row-1, col, grid, visited, numZeros, visitedZeros, score)
        
        if col > 0 and not visited[row][col-1]:
            score = self.dfs(rows, cols, row, col-1, grid, visited, numZeros, visitedZeros, score)
         
        if row < rows-1 and not visited[row+1][col]:
            score = self.dfs(rows, cols, row+1, col, grid, visited, numZeros, visitedZeros, score)
            
        if col < cols-1 and not visited[row][col+1]:
            score = self.dfs(rows, cols, row, col+1, grid, visited, numZeros, visitedZeros, score)
        
        if grid[row][col] == 0:
            visitedZeros -= 1
        visited[row][col] = False
        return score
        
 

