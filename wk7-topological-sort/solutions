Problem 1
207: Course Schedule

class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        graph = [[] for i in range(numCourses)]
        visit = [ 0 for i in range(numCourses)]
        
        for x, y in prerequisites:
            graph[x].append(y)
        for i in range(numCourses):
            if not self.dfs(i, visit, graph):
                return False
        return True
            
    def dfs(self, i, visit, graph):
        if visit[i] == -1:
            return False
        if visit[i] == 1:
            return True
        visit[i] = -1
        for j in graph[i]:
            if not self.dfs(j, visit, graph):
                return False
        visit[i] = 1
        return True
        

Problem 2
210: Course Schedule II

class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        color = [0]*numCourses
        graph = collections.defaultdict(set)
        for x in prerequisites:
            graph[x[0]].add(x[1])
            
        ans = []
        def dfs(i):
            color[i] = -1
            for x in graph[i]:
                if color[x]==0:  
                    if not dfs(x):
                        return False
                if color[x] == -1:  
                    return False
            ans.append(i) 
            color[i] = 1
            return True
        
        for i in range(numCourses):
            if color[i]==0:   
                if not dfs(i):
                    return []
        return ans
                        
Problem 3
802: Find Eventual Safe States

class Solution(object):
    def eventualSafeNodes(self, graph):
        r = len(graph)
        c = [0] * r
        def eventualSafeNodesHelper(i):
            c[i] = 1
            for j in graph[i]:
                if c[j] == 0 and not eventualSafeNodesHelper(j) or c[j] == 1:
                    return False
            c[i] = 2
            return True
        for i in range(r):
            if c[i] == 0:
                eventualSafeNodesHelper(i)
        return [ i for i in range(r) if c[i] == 2]
    
    
Problem 4
329: Longest Increasing Path in a Matrix

class Solution(object):
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        def dfs(i, j):
            if not dp[i][j]:
                val = matrix[i][j]
                dp[i][j] = 1 + max(
                    dfs(i - 1, j) if i and val > matrix[i - 1][j] else 0,
                    dfs(i + 1, j) if i < M - 1 and val > matrix[i + 1][j] else 0,
                    dfs(i, j - 1) if j and val > matrix[i][j - 1] else 0,
                    dfs(i, j + 1) if j < N - 1 and val > matrix[i][j + 1] else 0)
            return dp[i][j]

        if not matrix or not matrix[0]: return 0
        M, N = len(matrix), len(matrix[0])
        dp = [[0] * N for i in range(M)]
        return max(dfs(x, y) for x in range(M) for y in range(N))
        
        
Problem 5
269: Alien Dictionary (optional, accessable only to premium users)

class Solution(object):
    def alienOrder(self, words):
        """
        :type words: List[str]
        :rtype: str
        """
        '''
        Topological Sort of Graph
        '''
        less = []
        for pair in zip(words, words[1:]):
            for a, b in zip(*pair):
                if a != b:
                    less += a + b,
                    break
        chars = set(''.join(words))
        order = []
        while less:
            free = chars - set(zip(*less)[1])
            if not free:
                return ''
            order += free
            less = filter(free.isdisjoint, less)
            chars -= free
        return ''.join(order + list(chars))
